{
  "version": 3,
  "sources": ["../../react-phone-number-input/source/PhoneInputBrowser.js", "../../react-phone-number-input/source/PhoneInput.js", "../../react-phone-number-input/source/usePhoneDigits.js", "../../react-phone-number-input/input/index.js"],
  "sourcesContent": ["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport PhoneInput_ from './PhoneInput.js'\r\nimport InputSmart from './InputSmart.js'\r\nimport InputBasic from './InputBasic.js'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\tfunction PhoneInput({\r\n\t\tsmartCaret,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\treturn (\r\n\t\t\t<PhoneInput_\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tComponent={smartCaret ? InputSmart : InputBasic} />\r\n\t\t)\r\n\t}\r\n\r\n\tPhoneInput = React.forwardRef(PhoneInput)\r\n\r\n\tPhoneInput.propTypes = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type` attribute.\r\n\t\t */\r\n\t\ttype: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * HTML `<input/>` `autocomplete` attribute.\r\n\t\t */\r\n\t\tautoComplete: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * By default, the caret position is being \"intelligently\" managed\r\n\t\t * while a user inputs a phone number.\r\n\t\t * This \"smart\" caret behavior can be turned off\r\n\t\t * by passing `smartCaret={false}` property.\r\n\t\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t\t */\r\n\t\t// Is `true` by default.\r\n\t\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tPhoneInput.defaultProps = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type=\"tel\"`.\r\n\t\t */\r\n\t\ttype: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t\t */\r\n\t\tsmartCaret: true,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn PhoneInput\r\n}\r\n\r\nexport default createInput()", "import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport usePhoneDigits from './usePhoneDigits.js'\r\n\r\nfunction PhoneInput({\r\n\tComponent,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tvalue,\r\n\tonChange,\r\n\tmetadata,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\t...rest\r\n}, ref) {\r\n\t// \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n\tconst [\r\n\t\tphoneDigits,\r\n\t\tsetPhoneDigits\r\n\t] = usePhoneDigits({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tmetadata\r\n\t})\r\n\treturn (\r\n\t\t<Component\r\n\t\t\t{...rest}\r\n\t\t\tref={ref}\r\n\t\t\tmetadata={metadata}\r\n\t\t\tinternational={international}\r\n\t\t\twithCountryCallingCode={withCountryCallingCode}\r\n\t\t\tcountry={country || defaultCountry}\r\n\t\t\tvalue={phoneDigits}\r\n\t\t\tonChange={setPhoneDigits} />\r\n\t)\r\n}\r\n\r\nPhoneInput = React.forwardRef(PhoneInput)\r\n\r\nPhoneInput.propTypes = {\r\n\t/**\r\n\t * The phone number (in E.164 format).\r\n\t * Examples: `\"+12\"`, `\"+12133734253\"`.\r\n\t * An \"empty\" `value` could be represented by any \"falsy\" value like `undefined`, `null` or an empty string `\"\"`.\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t * Updates the `value` property (to `undefined` in case it's empty).\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * as a national phone number (example: `(213) 373-4253`),\r\n\t * or as an international phone number without \"country calling code\"\r\n\t * if `international` property is passed (example: `213 373 4253`).\r\n\t * Example: \"US\".\r\n\t * If no `country` is passed then `value`\r\n\t * is formatted as an international phone number.\r\n\t * (example: `+1 213 373 4253`)\r\n\t */\r\n\tcountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n\t * The user can still input a phone number in international format.\r\n\t * Example: \"US\".\r\n\t * `country` and `defaultCountry` properties are mutually exclusive.\r\n\t */\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If `country` property is passed along with `international={true}` property\r\n\t * then the phone number will be input in \"international\" format for that `country`\r\n\t * (without \"country calling code\").\r\n\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t * (without \"country calling code\" `+1`).\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If `country` and `international` properties are set,\r\n\t * then by default it won't include \"country calling code\" in the input field.\r\n\t * To change that, pass `withCountryCallingCode` property,\r\n\t * and it will include \"country calling code\" in the input field.\r\n\t */\r\n\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t/**\r\n\t * A component that renders the `<input/>` itself and also\r\n\t * parses and formats its `value` as the user inputs it.\r\n\t */\r\n\tComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n\t * then the `value` will be formatted as a national phone number by default.\r\n\t * To format the initial `value` of `defaultCountry` as an international number instead\r\n\t * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n\t */\r\n\tuseNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t */\r\n\tmetadata: PropTypes.object.isRequired\r\n}\r\n\r\nPhoneInput.defaultProps = {\r\n\t/**\r\n\t * Set to `true` to force international phone number format\r\n\t * (without \"country calling code\") when `country` is specified.\r\n\t */\r\n\t// international: false,\r\n\r\n\t/**\r\n\t * Prefer national format when formatting E.164 phone number `value`\r\n\t * corresponding to `defaultCountry`.\r\n\t */\r\n\tuseNationalFormatForDefaultCountryValue: true\r\n}\r\n\r\nexport default PhoneInput", "import { useRef, useState, useCallback, useEffect } from 'react'\r\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './helpers/getInternationalPhoneNumberPrefix.js'\r\n\r\n/**\r\n * Returns `[phoneDigits, setPhoneDigits]`.\r\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n */\r\nexport default function usePhoneDigits({\r\n\tvalue,\r\n\tonChange,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata\r\n}) {\r\n\tconst countryMismatchDetected = useRef()\r\n\tconst onCountryMismatch = (value, country, actualCountry) => {\r\n\t\tconsole.error(`[react-phone-number-input] Expected phone number ${value} to correspond to country ${country} but ${actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t'}.`)\r\n\t\tcountryMismatchDetected.current = true\r\n\t}\r\n\r\n\tconst getInitialPhoneDigits = (options) => {\r\n\t\treturn getPhoneDigitsForValue(\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tdefaultCountry,\r\n\t\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\t\tmetadata,\r\n\t\t\t(...args) => {\r\n\t\t\t\tif (options && options.onCountryMismatch) {\r\n\t\t\t\t\toptions.onCountryMismatch()\r\n\t\t\t\t}\r\n\t\t\t\tonCountryMismatch.apply(this, args)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\t// This is only used to detect `country` property change.\r\n\tconst [prevCountry, setPrevCountry] = useState(country)\r\n\t// This is only used to detect `defaultCountry` property change.\r\n\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\r\n\t// `phoneDigits` is the `value` passed to the `<input/>`.\r\n\tconst [phoneDigits, setPhoneDigits] = useState(getInitialPhoneDigits())\r\n\t// This is only used to detect `value` property changes.\r\n\tconst [valueForPhoneDigits, setValueForPhoneDigits] = useState(value)\r\n\r\n\t// Rerender hack.\r\n\tconst [rerenderTrigger, setRerenderTrigger] = useState()\r\n\tconst rerender = useCallback(() => setRerenderTrigger({}), [setRerenderTrigger])\r\n\r\n\tfunction getValueForPhoneDigits(phoneDigits) {\r\n\t\t// If the user hasn't input any digits then `value` is `undefined`.\r\n\t\tif (!phoneDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (country && international && !withCountryCallingCode) {\r\n\t\t\tphoneDigits = `+${getCountryCallingCode(country, metadata)}${phoneDigits}`\r\n\t\t}\r\n\t\t// Return the E.164 phone number value.\r\n\t\t//\r\n\t\t// Even if no \"national (significant) number\" digits have been input,\r\n\t\t// still return a non-`undefined` value.\r\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\r\n\t\t//\r\n\t\t// For example, if the user has selected country `US` and entered `\"1\"`\r\n\t\t// then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\r\n\t\t// digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\r\n\t\t// because otherwise the app would think that the input is empty and mark it as such\r\n\t\t// while in reality it isn't empty, which might be thought of as a \"bug\", or just\r\n\t\t// a \"weird\" behavior.\r\n\t\t//\r\n\t\t// The only case when there's any input and `getNumberValue()` still returns `undefined`\r\n\t\t// is when that input is `\"+\"`.\r\n\t\t//\r\n\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\r\n\t\tasYouType.input(phoneDigits)\r\n\t\treturn asYouType.getNumberValue()\r\n\t}\r\n\r\n\t// If `value` property has been changed externally\r\n\t// then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (value !== valueForPhoneDigits) {\r\n\t\t\tsetValueForPhoneDigits(value)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [value])\r\n\r\n\t// If the `country` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (country !== prevCountry) {\r\n\t\t\tsetPrevCountry(country)\r\n\t\t\tlet countryMismatchDetected\r\n\t\t\tconst phoneDigits = getInitialPhoneDigits({\r\n\t\t\t\tonCountryMismatch() {\r\n\t\t\t\t\tcountryMismatchDetected = true\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tsetPhoneDigits(phoneDigits)\r\n\t\t\tif (countryMismatchDetected) {\r\n\t\t\t\tsetValueForPhoneDigits(getValueForPhoneDigits(phoneDigits))\r\n\t\t\t}\r\n\t\t}\r\n\t}, [country])\r\n\r\n\t// If the `defaultCountry` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (defaultCountry !== prevDefaultCountry) {\r\n\t\t\tsetPrevDefaultCountry(defaultCountry)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [defaultCountry])\r\n\r\n\t// Update the `value` after `valueForPhoneDigits` has been updated.\r\n\tuseEffect(() => {\r\n\t\tif (valueForPhoneDigits !== value) {\r\n\t\t\tonChange(valueForPhoneDigits)\r\n\t\t}\r\n\t}, [valueForPhoneDigits])\r\n\r\n\tconst onSetPhoneDigits = useCallback((phoneDigits) => {\r\n\t\tlet value\r\n\t\tif (country) {\r\n\t\t\tif (international && withCountryCallingCode) {\r\n\t\t\t\t// The `<input/>` value must start with the country calling code.\r\n\t\t\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\t\t\t// If a user tabs into a phone number input field\r\n\t\t\t\t\t// that is `international` and `withCountryCallingCode`,\r\n\t\t\t\t\t// and then starts inputting local phone number digits,\r\n\t\t\t\t\t// the first digit would get \"swallowed\" if the fix below wasn't implemented.\r\n\t\t\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// // Reset phone digits if they don't start with the correct prefix.\r\n\t\t\t\t\t\t// // Undo the `<input/>` value change if it doesn't.\r\n\t\t\t\t\t\tif (countryMismatchDetected.current) {\r\n\t\t\t\t\t\t\t// In case of a `country`/`value` mismatch,\r\n\t\t\t\t\t\t\t// if it performed an \"undo\" here, then\r\n\t\t\t\t\t\t\t// it wouldn't let a user edit their phone number at all,\r\n\t\t\t\t\t\t\t// so this special case at least allows phone number editing\r\n\t\t\t\t\t\t\t// when `value` already doesn't match the `country`.\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// If it simply did `phoneDigits = prefix` here,\r\n\t\t\t\t\t\t\t// then it could have no effect when erasing phone number\r\n\t\t\t\t\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t\t\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t\t\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t\t\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t\t\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t\t\t\t\t// forcefully rerendered here.\r\n\t\t\t\t\t\t\tsetPhoneDigits(prefix)\r\n\t\t\t\t\t\t\tsetValueForPhoneDigits(undefined)\r\n\t\t\t\t\t\t\t// Force a re-render of the `<input/>` with previous `phoneDigits` value.\r\n\t\t\t\t\t\t\treturn rerender()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Entering phone number either in \"national\" format\r\n\t\t\t\t// when `country` has been specified, or in \"international\" format\r\n\t\t\t\t// when `country` has been specified but `withCountryCallingCode` hasn't.\r\n\t\t\t\t// Therefore, `+` is not allowed.\r\n\t\t\t\tif (phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\t\t\t// Remove the `+`.\r\n\t\t\t\t\tphoneDigits = phoneDigits.slice(1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (!defaultCountry) {\r\n\t\t\t// Force a `+` in the beginning of a `value`\r\n\t\t\t// when no `country` and `defaultCountry` have been specified.\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t// Prepend a `+`.\r\n\t\t\t\tphoneDigits = '+' + phoneDigits\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Convert `phoneDigits` to `value`.\r\n\t\tif (phoneDigits) {\r\n\t\t\tvalue = getValueForPhoneDigits(phoneDigits)\r\n\t\t}\r\n\t\tsetPhoneDigits(phoneDigits)\r\n\t\tsetValueForPhoneDigits(value)\r\n\t}, [\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tdefaultCountry,\r\n\t\tmetadata,\r\n\t\tsetPhoneDigits,\r\n\t\tsetValueForPhoneDigits,\r\n\t\trerender,\r\n\t\tcountryMismatchDetected\r\n\t])\r\n\r\n\treturn [\r\n\t\tphoneDigits,\r\n\t\tonSetPhoneDigits\r\n\t]\r\n}\r\n\r\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {boolean} [withCountryCallingCode]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nfunction getPhoneDigitsForValue(\r\n\tvalue,\r\n\tcountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata,\r\n\tonCountryMismatch\r\n) {\r\n\tif (country && international && withCountryCallingCode) {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\tif (value) {\r\n\t\t\tif (value.indexOf(prefix) !== 0) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t\treturn prefix\r\n\t}\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tif (!country && !defaultCountry) {\r\n\t\treturn value\r\n\t}\r\n\tconst asYouType = new AsYouType(undefined, metadata)\r\n\tasYouType.input(value)\r\n\tconst phoneNumber = asYouType.getNumber()\r\n\tif (phoneNumber) {\r\n\t\tif (country) {\r\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\r\n\t\t\t\tonCountryMismatch(value, country, phoneNumber.country)\r\n\t\t\t} else if (phoneNumber.countryCallingCode !== getCountryCallingCode(country, metadata)) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\tif (international) {\r\n\t\t\t\treturn phoneNumber.nationalNumber\r\n\t\t\t}\r\n\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t} else {\r\n\t\t\t// `phoneNumber.countryCallingCode` is compared here  instead of\r\n\t\t\t// `phoneNumber.country`, because, for example, a person could have\r\n\t\t\t// previously input a phone number (in \"national\" format) that isn't\r\n\t\t\t// 100% valid for the `defaultCountry`, and if `phoneNumber.country`\r\n\t\t\t// was compared, then it wouldn't match, and such phone number\r\n\t\t\t// wouldn't be formatted as a \"national\" one, and instead would be\r\n\t\t\t// formatted as an \"international\" one, confusing the user.\r\n\t\t\t// Comparing `phoneNumber.countryCallingCode` works around such issues.\r\n\t\t\t//\r\n\t\t\t// Example: `defaultCountry=\"US\"` and the `<input/>` is empty.\r\n\t\t\t// The user inputs: \"222 333 4444\", which gets formatted to \"(222) 333-4444\".\r\n\t\t\t// The user then clicks \"Save\", the page is refreshed, and the user sees\r\n\t\t\t// that the `<input/>` value is now \"+1 222 333 4444\" which confuses the user:\r\n\t\t\t// the user expected the `<input/>` value to be \"(222) 333-4444\", same as it\r\n\t\t\t// was when they've just typed it in. The cause of the issue is that \"222 333 4444\"\r\n\t\t\t// is not a valid national number for US, and `phoneNumber.country` is compared\r\n\t\t\t// instead of `phoneNumber.countryCallingCode`. After the `phoneNumber.country`\r\n\t\t\t// comparison is replaced with `phoneNumber.countryCallingCode` one, the issue\r\n\t\t\t// is no longer the case.\r\n\t\t\t//\r\n\t\t\tif (phoneNumber.countryCallingCode && phoneNumber.countryCallingCode === getCountryCallingCode(defaultCountry, metadata) && useNationalFormatForDefaultCountryValue) {\r\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n}", "import metadata from 'libphonenumber-js/min/metadata'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tisSupportedCountry as _isSupportedCountry\r\n} from '../core/index.js'\r\n\r\nimport { createInput } from '../modules/PhoneInputBrowser.js'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}"],
  "mappings": "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",
  "names": ["import_react", "import_prop_types", "import_react", "value", "onChange", "country", "defaultCountry", "international", "withCountryCallingCode", "useNationalFormatForDefaultCountryValue", "metadata", "countryMismatchDetected", "useRef", "onCountryMismatch", "actualCountry", "console", "error", "current", "getInitialPhoneDigits", "options", "getPhoneDigitsForValue", "args", "apply", "useState", "prevCountry", "setPrevCountry", "prevDefaultCountry", "setPrevDefaultCountry", "phoneDigits", "setPhoneDigits", "valueForPhoneDigits", "setValueForPhoneDigits", "rerenderTrigger", "setRerenderTrigger", "rerender", "useCallback", "getValueForPhoneDigits", "getCountryCallingCode", "asYouType", "AsYouType", "input", "getNumberValue", "useEffect", "onSetPhoneDigits", "prefix", "getInternationalPhoneNumberPrefix", "indexOf", "undefined", "slice", "phoneNumber", "getNumber", "countryCallingCode", "nationalNumber", "parseDigits", "formatNational", "PhoneInput", "ref", "Component", "country", "defaultCountry", "useNationalFormatForDefaultCountryValue", "value", "onChange", "metadata", "international", "withCountryCallingCode", "rest", "usePhoneDigits", "_slicedToArray", "phoneDigits", "setPhoneDigits", "React", "forwardRef", "propTypes", "PropTypes", "string", "func", "isRequired", "bool", "elementType", "object", "defaultProps", "createInput", "defaultMetadata", "PhoneInput", "ref", "smartCaret", "rest", "_objectWithoutProperties", "_excluded", "React", "_extends", "InputSmart", "InputBasic", "forwardRef", "propTypes", "type", "PropTypes", "string", "autoComplete", "bool", "isRequired", "metadata", "object", "defaultProps", "parsePhoneNumber", "formatPhoneNumber", "formatPhoneNumberIntl", "isValidPhoneNumber", "isPossiblePhoneNumber", "getCountries", "getCountryCallingCode", "isSupportedCountry"]
}
